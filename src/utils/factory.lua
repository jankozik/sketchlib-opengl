--------------------------------------------------------------------------------
-- This file is used to generate c++ code and overwrite `src/utils/factory.cpp`.
-- Information about all scenes are stored in the global variable `g_config`,
-- which will be referenced by this file to create our factory pattern script.
--------------------------------------------------------------------------------
local config = _G["g_config"]
local count = #(config.titles)

print("Generating C++ code for the factory pattern")

code = [[
// THIS SOURCE FILE IS AUTO GENERATED BY LUA SCRIPT, DO NOT MODIFY.
// THIS IS THE SIMPLE FACTORY PATTERN TO LOAD NEW SCENE AT RUNTIME.

// once you have created a new scene, rebuild the solution on the command line,
// the content of this file will be update automatically to reflect your changes.

#include "pch.h"

#include "core/log.h"
#include "utils/factory.h"

]]

for i = 1, count do
    local file = config.files[i]
    code = code .. "#include \"" .. file .. "/" .. file .. ".h\"\n"
end

code = code .. "\n" .. [[
namespace factory {

    const std::vector<std::string> titles {
        "Welcome Screen"]]

for i = 1, count do
    code = code .. ",\n        " .. config.titles[i]
end

code = code .. "\n    };\n\n" .. [[
    Scene* LoadScene(const std::string& title) {
        if (title == "Welcome Screen") return new Scene(title);
]]

for i = 1, count do
    local title = config.titles[i]
    local class = config.classes[i]

    code = code .. "        if (title == " .. title
    code = code .. ") return new " .. class .. "(title);\n"
end

code = code .. "\n" .. [[
        CORE_ERROR("Scene \"{0}\" is not registered in the factory ...", title);
        std::cin.get();
        exit(EXIT_FAILURE);
    }
}
]]

print("Overwriting source file \"src/utils/factory.cpp\"")

io.writefile("factory.cpp", code)
