#pragma once

#include "scene/scene.h"

namespace scene {

    class Scene04 : public Scene {

        using Scene::Scene;

        void Init() override;
        void OnSceneRender() override;
        void OnImGuiRender() override;

        Entity camera;
        Entity skybox;
        Entity direct_light;
        Entity cloth_model;  // static cloth model

        asset_ref<Texture> irradiance_map;
        asset_ref<Texture> prefiltered_map;
        asset_ref<Texture> BRDF_LUT;

        void PrecomputeIBL();
        void SetupBuffers();
        void SetupMaterial(Material& pbr_mat, bool cloth, bool textured);

        // dynamic cloth mesh generated by simulation
        asset_tmp<VAO>  cloth_vao;
        asset_tmp<IBO>  cloth_ibo;
        asset_tmp<VBO>  cloth_vbo;     // texture coordinate VBO (static)
        asset_tmp<SSBO> cloth_pos[2];  // position VBO (updated as SSBO)
        asset_tmp<SSBO> cloth_vel[2];  // velocity SSBO
        asset_tmp<SSBO> cloth_normal;  // normal VBO (updated as SSBO)

        std::vector<vec4> init_pos;   // vertices initial position
        std::vector<vec4> init_vel;   // vertices initial velocity (vec4(0.0))
        std::vector<vec2> tex_coord;  // vertices texture coordinates (static)
        std::vector<uint> indices;
    };

}